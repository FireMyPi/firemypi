#!/bin/bash

##
## Copyright © 2020-2024 David Čuka and Stephen Čuka All Rights Reserved.
##
## FireMyPi is licensed under the Creative Commons Attribution-NonCommercial-
## NoDerivatives 4.0 International License (CC BY-NC-ND 4.0).
##
## The full text of the license can be found in the included LICENSE file 
## or at https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode.en.
##
## For the avoidance of doubt, FireMyPi is for personal use only and may not 
## be used by or for any business in any way.
##

#
# This script is automatically generated by the FireMyPi configuration tool.
# Do not edit by hand.
#

#
# This script is run during sysinit to install the configuration generated
# by the ipfire configuration tool.
#
# The tasks are:
#    1.   Set the timezone
#    2.   Unpack the ipfire-config-nodeN.tgz archive and overlay it
#         onto the root file system.
#    3.   Install udev-additions.
#    4.   Trigger udev restart to assign the ipfire interfaces.
#    5.   Modify sshd to listen only on green0, allow password auth and 
#         overwrite /var/ipfire/remote/settings.
#    6    Update httpd (apache) to listen only on green0.
#    7.   Add dynamic dns update to fcron if needed.
#    8.   Create links to start/kill dhcp.
#    9.   Set the flag so that ipfire setup routine does not run.
#    10.  Set the flag so that this script only runs once.
#

CONFIG=firemypi-core{{core_number}}-{{prefix}}{{node}}-config-{{test_prod}}-{{date}}
LOG=/firemypi-configure.log

function writelog()
{
	echo "`date`: $*" >> $LOG
}

# Exit if configuration was already installed...
if [ -e /var/ipfire/main/$CONFIG.installed ]
then
	echo ""
	echo "Node is configured with $CONFIG..."
	echo ""
	writelog "Node is configured with $CONFIG..."
	exit 0
fi

echo ""
echo "Configuring node with $CONFIG..."
echo ""
writelog "Configuring node with $CONFIG..."
#read -p "<Enter> to continue..."


#
#    1.  Set the timezone
#
echo "Setting timezone to {{timezone}}..."
writelog "Setting timezone to {{timezone}}..."
ln -s -f /usr/share/zoneinfo/{{timezone}} /etc/localtime
#read -p "<Enter> to continue..."


#
#    2.  Unpack the ipfire-config-nodeN.tgz archive and overlay it
#        onto the root file system.
#
echo "Installing $CONFIG..."
writelog "Installing $CONFIG..."
cd /
tar --overwrite --warning=no-timestamp -pxzf /root/$CONFIG.tgz
#read -p "<Enter> to continue..."


#
#    3.  Install udev-additions.
#
echo "Installing udev-additions..."
cp /root/udev-firemypi /lib/udev/network-hotplug-firemypi
cat /root/udev-rule >> /lib/udev/rules.d/60-net.rules
#read -p "<Enter> to continue..."


#
#    4.  Restart udev to assign the ipfire interfaces.
#
echo "Restarting udev..."
writelog "Restarting udev..."
/etc/init.d/udev restart
#read -p "<Enter> to continue..."


#
#    5.  Modify sshd to listen only on green0, allow password auth and 
#        overwrite /var/ipfire/remote/settings.
#
if [[ "{{include_ssh}}" == "True" ]]
then
	echo "Configuring ssh..."
	writelog "Configuring ssh..."
	# SSH will listen only on the green0 internal interface.
	sed -i \
	  's/^ListenAddress 0\.0\.0\.0/ListenAddress {{green_ip}}/g' \
	    /etc/ssh/sshd_config
	# SSH will allow password authentication.
	sed -i \
	  's/^PasswordAuthentication no/PasswordAuthentication yes/g' \
	    /etc/ssh/sshd_config
	# Overwrite /var/ipfire/remote/settings file.
	echo "ENABLE_SSH_KEYS=on" >	  /var/ipfire/remote/settings
	echo "ENABLE_SSH_PASSWORDS=on" >> /var/ipfire/remote/settings
	echo "ENABLE_SSH_PORTFW=off" >>	  /var/ipfire/remote/settings
	echo "ENABLE_SSH=on" >>		  /var/ipfire/remote/settings
	echo "SSH_PORT=on" >>		  /var/ipfire/remote/settings
	# Enable SSH.
	touch /var/ipfire/remote/enablessh
fi


#
#    6.  Update httpd (apache) to listen only on green0.
#
if [[ "{{include_httpd}}" == "True" ]]
then
	echo "Configuring httpd..."
	writelog "Configuring httpd..."
	# Update listen.conf to only listen on green0.
	sed -i 's/^Listen 81/Listen {{green_ip}}:81/g' \
	  /etc/httpd/conf/listen.conf
	sed -i 's/^Listen 444/Listen {{green_ip}}:444/g' \
	  /etc/httpd/conf/listen.conf
fi


#
#    7.  Add dynamic dns update to fcron if needed.
#
if [[ "{{include_ddns}}" == "True" && "{{ddns_auth_method}}" = "keypair" ]]
then
	echo "Installing updDynDNS to fcron..."
	writelog "Installing updDynDNS to fcron..."
	ln -s /root/ddns/updDynDNS /etc/fcron.cyclic
else
	echo "Not installing updDynDNS to fcron..."
	writelog "Not installing updDynDNS to fcron..."
fi
#read -p "<Enter> to continue..."


#
#    8.  Create links to start/kill dhcp.
#
if [[ "{{include_dhcp}}" == "True" && "{{test_prod}}" == "prod" ]]
then
	echo "Creating links to start/kill dhcp..."
	writelog "Creating links to start/kill dhcp..."
	ln -s /etc/rc.d/init.d/dhcp /etc/rc.d/rc3.d/S30dhcp
	ln -s /etc/rc.d/init.d/dhcp /etc/rc.d/rc0.d/K30dhcp
	ln -s /etc/rc.d/init.d/dhcp /etc/rc.d/rc6.d/K30dhcp
fi
#read -p "<Enter> to continue..."


#
#    9.  Set the flag so that ipfire setup routine does not run.
#
if [[ "{{disable_setup}}" == "True" ]]
then
	echo "Disabling IPFire setup program..."
	writelog "Disabling IPFire setup program..."
	touch /var/ipfire/main/firstsetup_ok
fi
#read -p "<Enter> to continue..."


#
#    10.  Set a flag so that this script only runs once.
#
echo "Setting run-once flag for configure-firemypi..."
writelog "Setting run-once flag for configure-firemypi..."
touch /var/ipfire/main/$CONFIG.installed
#read -p "<Enter> to continue..."


echo ""
echo "Node configuration $CONFIG done."
echo ""
writelog "Node configuration $CONFIG done."
#read -p "<Enter> to continue..."
exit 0
